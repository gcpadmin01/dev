<?php

namespace App\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Support\Facades\Log;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        #$this->reportable(function ($e) {
        #    //
        #});
    }

    public function render($request,  $e)
    {

        //if ($e->getCode() != null){
        if (!empty($e->getMessage())){
            $method  = $request->ajax()?$request->method().' - AJAX':$request->method().' - NORMAL';
            Log::error("= = = = = = = = START ERROR = = = = = = = = \n");

            Log::error('Code: '.($e->getCode() != null ? $e->getCode():"*****"));
            Log::error('IP: '.$request->ip());
            Log::error('Method: '.$method);
            Log::error('Url: '.$request->fullUrl());
            Log::error('MESSAGE: '.$e->getMessage());

            if(isset($_SERVER['HTTP_REFERER'])){
                Log::error('REFERER: '.$_SERVER['HTTP_REFERER']);
            }

            Log::error("= = = = = = = = END ERROR = = = = = = = = \n");
        }

        //}

        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }
}
